/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 animeGirlModel.glb -t
Author: 腱鞘炎の人 (https://sketchfab.com/Kensyouen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/just-a-girl-b2359160a4f54e76b5ae427a55d9594d
Title: Just a girl
*/

import * as THREE from "three";
import { useRef } from "react";
import { useGLTF, OrbitControls } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { DirectionalLight, Group, Mesh } from "three";
import { easing } from "maath";
import { EffectComposer, SelectiveBloom } from "@react-three/postprocessing";

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_9: THREE.Mesh;
    Object_10: THREE.Mesh;
  };
  materials: {
    lambert5SG: THREE.MeshBasicMaterial;
    lambert6SG: THREE.MeshBasicMaterial;
    lambert7SG: THREE.MeshLambertMaterial;
  };
};

export const AnimeGirlModel = () => {
  const { nodes, materials } = useGLTF(
    "/models/animeGirl/animeGirl.glb"
  ) as unknown as GLTFResult;

  const controlRef = useRef<any>();

  const lightRef = useRef<DirectionalLight>(null);

  const model = useRef<Group>(null);

  const blurredMeshRef1 = useRef<Mesh>(null);
  const blurredMeshRef2 = useRef<Mesh>(null);

  useFrame((state, delta) => {
    if (model && model.current) {
      easing.dampE(
        model.current.rotation,
        [0, state.pointer.x * (state.camera.position.z > 1 ? 1 : -1), 0],
        0.4,
        delta,
        0.5
      );
    }
  });

  return (
    <>
      <OrbitControls
        enableRotate={false}
        maxPolarAngle={Math.PI / 2}
        minPolarAngle={Math.PI / 2}
        maxAzimuthAngle={0.1}
        minAzimuthAngle={0.2}
        ref={controlRef}
        enableZoom={false}
        makeDefault
      />

      <directionalLight
        color="black"
        intensity={0.1}
        position={[0, 0, 0]}
        ref={lightRef}
      />
      <EffectComposer autoClear={false}>
        <SelectiveBloom
          selection={[blurredMeshRef1, blurredMeshRef2]}
          mipmapBlur
          luminanceThreshold={0.3}
          intensity={0.3}
        />
      </EffectComposer>

      <group dispose={null} position={[-15, -90, -200]} ref={model}>
        <group rotation={[-Math.PI / 2, 0, 0.7]}>
          <mesh
            geometry={nodes.Object_2.geometry}
            material={materials.lambert5SG}
          />
          <mesh
            geometry={nodes.Object_3.geometry}
            material={materials.lambert5SG}
          />
          <mesh
            geometry={nodes.Object_4.geometry}
            material={materials.lambert5SG}
          />
          <mesh
            geometry={nodes.Object_5.geometry}
            material={materials.lambert6SG}
          />
          <mesh
            geometry={nodes.Object_6.geometry}
            material={materials.lambert6SG}
          />
          <mesh
            geometry={nodes.Object_7.geometry}
            material={materials.lambert6SG}
          />
          <mesh
            geometry={nodes.Object_8.geometry}
            material={materials.lambert6SG}
          />
          <mesh
            ref={blurredMeshRef1}
            geometry={nodes.Object_9.geometry}
            material={materials.lambert6SG}
          />
          <mesh
            ref={blurredMeshRef2}
            geometry={nodes.Object_10.geometry}
            material={materials.lambert7SG}
          />
        </group>
      </group>
    </>
  );
};

useGLTF.preload("/models/animeGirl/animeGirl.glb");
